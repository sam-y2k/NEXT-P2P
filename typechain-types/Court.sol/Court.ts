/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Court {
  export type VotesStruct = {
    countVotesFor: PromiseOrValue<BigNumberish>;
    countVotesAgainst: PromiseOrValue<BigNumberish>;
    juryVotes: PromiseOrValue<BigNumberish>[];
  };

  export type VotesStructOutput = [BigNumber, BigNumber, BigNumber[]] & {
    countVotesFor: BigNumber;
    countVotesAgainst: BigNumber;
    juryVotes: BigNumber[];
  };
}

export interface CourtInterface extends utils.Interface {
  functions: {
    "DISPUTE_EXPIRY()": FunctionFragment;
    "castVote(uint256,uint256,uint256)": FunctionFragment;
    "createDispute(uint256,address,address,uint256)": FunctionFragment;
    "dealDisputes(uint256,uint256)": FunctionFragment;
    "disputesCount()": FunctionFragment;
    "indexByJury(address)": FunctionFragment;
    "juries(address)": FunctionFragment;
    "juriesByIndex(uint256)": FunctionFragment;
    "marketAddress()": FunctionFragment;
    "marketOwner()": FunctionFragment;
    "requestSettlement(uint256,uint256)": FunctionFragment;
    "submitEvidences(uint256,uint256,string[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DISPUTE_EXPIRY"
      | "castVote"
      | "createDispute"
      | "dealDisputes"
      | "disputesCount"
      | "indexByJury"
      | "juries"
      | "juriesByIndex"
      | "marketAddress"
      | "marketOwner"
      | "requestSettlement"
      | "submitEvidences"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DISPUTE_EXPIRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createDispute",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dealDisputes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disputesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexByJury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "juries",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "juriesByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestSettlement",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidences",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DISPUTE_EXPIRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealDisputes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexByJury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "juries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "juriesByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidences",
    data: BytesLike
  ): Result;

  events: {
    "DisputeRaised(uint256,address,address)": EventFragment;
    "DisputeSettled(uint256,uint256)": EventFragment;
    "EvidenceSubmitted(uint256,uint256,string[])": EventFragment;
    "VoteCasted(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputeRaised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvidenceSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCasted"): EventFragment;
}

export interface DisputeRaisedEventObject {
  dealId: BigNumber;
  raisedBy: string;
  raisedAgainst: string;
}
export type DisputeRaisedEvent = TypedEvent<
  [BigNumber, string, string],
  DisputeRaisedEventObject
>;

export type DisputeRaisedEventFilter = TypedEventFilter<DisputeRaisedEvent>;

export interface DisputeSettledEventObject {
  dealId: BigNumber;
  dipsuteId: BigNumber;
}
export type DisputeSettledEvent = TypedEvent<
  [BigNumber, BigNumber],
  DisputeSettledEventObject
>;

export type DisputeSettledEventFilter = TypedEventFilter<DisputeSettledEvent>;

export interface EvidenceSubmittedEventObject {
  dealId: BigNumber;
  dipsuteId: BigNumber;
  evidenceURIs: string[];
}
export type EvidenceSubmittedEvent = TypedEvent<
  [BigNumber, BigNumber, string[]],
  EvidenceSubmittedEventObject
>;

export type EvidenceSubmittedEventFilter =
  TypedEventFilter<EvidenceSubmittedEvent>;

export interface VoteCastedEventObject {
  jury: string;
  vote: BigNumber;
  dealId: BigNumber;
  dipsuteId: BigNumber;
}
export type VoteCastedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  VoteCastedEventObject
>;

export type VoteCastedEventFilter = TypedEventFilter<VoteCastedEvent>;

export interface Court extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CourtInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DISPUTE_EXPIRY(overrides?: CallOverrides): Promise<[BigNumber]>;

    castVote(
      vote: PromiseOrValue<BigNumberish>,
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDispute(
      dealId: PromiseOrValue<BigNumberish>,
      raisedBy: PromiseOrValue<string>,
      raisedAgainst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dealDisputes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        Court.VotesStructOutput,
        number
      ] & {
        id: BigNumber;
        raisedAt: BigNumber;
        amount: BigNumber;
        raisedBy: string;
        raisedAgainst: string;
        votes: Court.VotesStructOutput;
        period: number;
      }
    >;

    disputesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    indexByJury(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    juries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    juriesByIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    marketAddress(overrides?: CallOverrides): Promise<[string]>;

    marketOwner(overrides?: CallOverrides): Promise<[string]>;

    requestSettlement(
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitEvidences(
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      evidenceURIs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DISPUTE_EXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

  castVote(
    vote: PromiseOrValue<BigNumberish>,
    dealId: PromiseOrValue<BigNumberish>,
    dipsuteId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDispute(
    dealId: PromiseOrValue<BigNumberish>,
    raisedBy: PromiseOrValue<string>,
    raisedAgainst: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dealDisputes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      Court.VotesStructOutput,
      number
    ] & {
      id: BigNumber;
      raisedAt: BigNumber;
      amount: BigNumber;
      raisedBy: string;
      raisedAgainst: string;
      votes: Court.VotesStructOutput;
      period: number;
    }
  >;

  disputesCount(overrides?: CallOverrides): Promise<BigNumber>;

  indexByJury(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  juries(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  juriesByIndex(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  marketAddress(overrides?: CallOverrides): Promise<string>;

  marketOwner(overrides?: CallOverrides): Promise<string>;

  requestSettlement(
    dealId: PromiseOrValue<BigNumberish>,
    dipsuteId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitEvidences(
    dealId: PromiseOrValue<BigNumberish>,
    dipsuteId: PromiseOrValue<BigNumberish>,
    evidenceURIs: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DISPUTE_EXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    castVote(
      vote: PromiseOrValue<BigNumberish>,
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createDispute(
      dealId: PromiseOrValue<BigNumberish>,
      raisedBy: PromiseOrValue<string>,
      raisedAgainst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dealDisputes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        Court.VotesStructOutput,
        number
      ] & {
        id: BigNumber;
        raisedAt: BigNumber;
        amount: BigNumber;
        raisedBy: string;
        raisedAgainst: string;
        votes: Court.VotesStructOutput;
        period: number;
      }
    >;

    disputesCount(overrides?: CallOverrides): Promise<BigNumber>;

    indexByJury(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    juries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    juriesByIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    marketAddress(overrides?: CallOverrides): Promise<string>;

    marketOwner(overrides?: CallOverrides): Promise<string>;

    requestSettlement(
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitEvidences(
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      evidenceURIs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DisputeRaised(uint256,address,address)"(
      dealId?: null,
      raisedBy?: null,
      raisedAgainst?: null
    ): DisputeRaisedEventFilter;
    DisputeRaised(
      dealId?: null,
      raisedBy?: null,
      raisedAgainst?: null
    ): DisputeRaisedEventFilter;

    "DisputeSettled(uint256,uint256)"(
      dealId?: null,
      dipsuteId?: null
    ): DisputeSettledEventFilter;
    DisputeSettled(dealId?: null, dipsuteId?: null): DisputeSettledEventFilter;

    "EvidenceSubmitted(uint256,uint256,string[])"(
      dealId?: null,
      dipsuteId?: null,
      evidenceURIs?: null
    ): EvidenceSubmittedEventFilter;
    EvidenceSubmitted(
      dealId?: null,
      dipsuteId?: null,
      evidenceURIs?: null
    ): EvidenceSubmittedEventFilter;

    "VoteCasted(address,uint256,uint256,uint256)"(
      jury?: null,
      vote?: null,
      dealId?: null,
      dipsuteId?: null
    ): VoteCastedEventFilter;
    VoteCasted(
      jury?: null,
      vote?: null,
      dealId?: null,
      dipsuteId?: null
    ): VoteCastedEventFilter;
  };

  estimateGas: {
    DISPUTE_EXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    castVote(
      vote: PromiseOrValue<BigNumberish>,
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDispute(
      dealId: PromiseOrValue<BigNumberish>,
      raisedBy: PromiseOrValue<string>,
      raisedAgainst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dealDisputes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputesCount(overrides?: CallOverrides): Promise<BigNumber>;

    indexByJury(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    juries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    juriesByIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketAddress(overrides?: CallOverrides): Promise<BigNumber>;

    marketOwner(overrides?: CallOverrides): Promise<BigNumber>;

    requestSettlement(
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitEvidences(
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      evidenceURIs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DISPUTE_EXPIRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    castVote(
      vote: PromiseOrValue<BigNumberish>,
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDispute(
      dealId: PromiseOrValue<BigNumberish>,
      raisedBy: PromiseOrValue<string>,
      raisedAgainst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dealDisputes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexByJury(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    juries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    juriesByIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestSettlement(
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitEvidences(
      dealId: PromiseOrValue<BigNumberish>,
      dipsuteId: PromiseOrValue<BigNumberish>,
      evidenceURIs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
