/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MarketInterface extends utils.Interface {
  functions: {
    "acceptOrder(uint256)": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "courtAddress()": FunctionFragment;
    "createDeal(string,uint256,uint256,uint256,uint256,string[],string[],uint256)": FunctionFragment;
    "createOrder(uint256,uint256)": FunctionFragment;
    "dealerOrders(address,uint256)": FunctionFragment;
    "deals(uint256)": FunctionFragment;
    "dealsCount()": FunctionFragment;
    "description()": FunctionFragment;
    "increaseDealAmount(uint256,uint256)": FunctionFragment;
    "marketOwner()": FunctionFragment;
    "name()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "ordersCount()": FunctionFragment;
    "raiseDispute(uint256)": FunctionFragment;
    "settleOrder(uint256)": FunctionFragment;
    "txDoneByUser(uint256)": FunctionFragment;
    "updateCourt(address)": FunctionFragment;
    "updateDeal(uint256,uint256,uint256,uint256,string[],string[],uint256)": FunctionFragment;
    "updateOrder(uint256,uint256)": FunctionFragment;
    "userOrders(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOrder"
      | "cancelOrder"
      | "courtAddress"
      | "createDeal"
      | "createOrder"
      | "dealerOrders"
      | "deals"
      | "dealsCount"
      | "description"
      | "increaseDealAmount"
      | "marketOwner"
      | "name"
      | "orders"
      | "ordersCount"
      | "raiseDispute"
      | "settleOrder"
      | "txDoneByUser"
      | "updateCourt"
      | "updateDeal"
      | "updateOrder"
      | "userOrders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "courtAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDeal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dealerOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dealsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDealAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ordersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "txDoneByUser",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCourt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "courtAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealerOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dealsCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDealAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ordersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "txDoneByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCourt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOrders", data: BytesLike): Result;

  events: {
    "CourtUpdated(address)": EventFragment;
    "DealAmountIncreased(uint256,uint256)": EventFragment;
    "DealCreated(string,uint256,uint256,uint256,uint256,string[],string[],uint256)": EventFragment;
    "DealUpdated(uint256,uint256,uint256,string[],string[],uint256)": EventFragment;
    "DisputeRaised(uint256,address,address,uint256)": EventFragment;
    "OrderAccepted(uint256)": EventFragment;
    "OrderCancelled(uint256)": EventFragment;
    "OrderCreated(uint256,address,address,uint256,uint256)": EventFragment;
    "OrderDoneByUser(uint256)": EventFragment;
    "OrderSettled(uint256)": EventFragment;
    "OrderUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CourtUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealAmountIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeRaised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderDoneByUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderUpdated"): EventFragment;
}

export interface CourtUpdatedEventObject {
  courtAddress: string;
}
export type CourtUpdatedEvent = TypedEvent<[string], CourtUpdatedEventObject>;

export type CourtUpdatedEventFilter = TypedEventFilter<CourtUpdatedEvent>;

export interface DealAmountIncreasedEventObject {
  dealId: BigNumber;
  amount: BigNumber;
}
export type DealAmountIncreasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DealAmountIncreasedEventObject
>;

export type DealAmountIncreasedEventFilter =
  TypedEventFilter<DealAmountIncreasedEvent>;

export interface DealCreatedEventObject {
  dealName: string;
  pricePerUnit: BigNumber;
  minLimitAmount: BigNumber;
  maxLimitAmount: BigNumber;
  availableAmount: BigNumber;
  paymentMethods: string[];
  paymentDetails: string[];
  expiryTime: BigNumber;
}
export type DealCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    string[],
    BigNumber
  ],
  DealCreatedEventObject
>;

export type DealCreatedEventFilter = TypedEventFilter<DealCreatedEvent>;

export interface DealUpdatedEventObject {
  pricePerUnit: BigNumber;
  minLimitAmount: BigNumber;
  maxLimitAmount: BigNumber;
  paymentMethods: string[];
  paymentDetails: string[];
  expiryTime: BigNumber;
}
export type DealUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string[], string[], BigNumber],
  DealUpdatedEventObject
>;

export type DealUpdatedEventFilter = TypedEventFilter<DealUpdatedEvent>;

export interface DisputeRaisedEventObject {
  dealId: BigNumber;
  raisedBy: string;
  raisedAgainst: string;
  amount: BigNumber;
}
export type DisputeRaisedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  DisputeRaisedEventObject
>;

export type DisputeRaisedEventFilter = TypedEventFilter<DisputeRaisedEvent>;

export interface OrderAcceptedEventObject {
  orderId: BigNumber;
}
export type OrderAcceptedEvent = TypedEvent<
  [BigNumber],
  OrderAcceptedEventObject
>;

export type OrderAcceptedEventFilter = TypedEventFilter<OrderAcceptedEvent>;

export interface OrderCancelledEventObject {
  orderId: BigNumber;
}
export type OrderCancelledEvent = TypedEvent<
  [BigNumber],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderCreatedEventObject {
  orderId: BigNumber;
  userAddress: string;
  dealerAddress: string;
  dealPrice: BigNumber;
  amount: BigNumber;
}
export type OrderCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderDoneByUserEventObject {
  orderId: BigNumber;
}
export type OrderDoneByUserEvent = TypedEvent<
  [BigNumber],
  OrderDoneByUserEventObject
>;

export type OrderDoneByUserEventFilter = TypedEventFilter<OrderDoneByUserEvent>;

export interface OrderSettledEventObject {
  orderId: BigNumber;
}
export type OrderSettledEvent = TypedEvent<
  [BigNumber],
  OrderSettledEventObject
>;

export type OrderSettledEventFilter = TypedEventFilter<OrderSettledEvent>;

export interface OrderUpdatedEventObject {
  orderId: BigNumber;
  amount: BigNumber;
}
export type OrderUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  OrderUpdatedEventObject
>;

export type OrderUpdatedEventFilter = TypedEventFilter<OrderUpdatedEvent>;

export interface Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    courtAddress(overrides?: CallOverrides): Promise<[string]>;

    createDeal(
      dealerName: PromiseOrValue<string>,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      minLimitAmount: PromiseOrValue<BigNumberish>,
      maxLimitAmount: PromiseOrValue<BigNumberish>,
      availableAmount: PromiseOrValue<BigNumberish>,
      paymentMethods: PromiseOrValue<string>[],
      paymentDetails: PromiseOrValue<string>[],
      expiryTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOrder(
      dealId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dealerOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string
      ] & {
        id: BigNumber;
        pricePerUnit: BigNumber;
        minLimitAmount: BigNumber;
        maxLimitAmount: BigNumber;
        availableAmount: BigNumber;
        expiryTime: BigNumber;
        status: number;
        dealerAddress: string;
        dealerName: string;
      }
    >;

    dealsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    increaseDealAmount(
      dealId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketOwner(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string
      ] & {
        id: BigNumber;
        dealId: BigNumber;
        dealPrice: BigNumber;
        amount: BigNumber;
        startedAt: BigNumber;
        settledAt: BigNumber;
        status: number;
        userAddress: string;
      }
    >;

    ordersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    raiseDispute(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    txDoneByUser(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCourt(
      _courtAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDeal(
      dealId: PromiseOrValue<BigNumberish>,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      minLimitAmount: PromiseOrValue<BigNumberish>,
      maxLimitAmount: PromiseOrValue<BigNumberish>,
      paymentMethods: PromiseOrValue<string>[],
      paymentDetails: PromiseOrValue<string>[],
      expiryTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOrder(
      orderId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  acceptOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  courtAddress(overrides?: CallOverrides): Promise<string>;

  createDeal(
    dealerName: PromiseOrValue<string>,
    pricePerUnit: PromiseOrValue<BigNumberish>,
    minLimitAmount: PromiseOrValue<BigNumberish>,
    maxLimitAmount: PromiseOrValue<BigNumberish>,
    availableAmount: PromiseOrValue<BigNumberish>,
    paymentMethods: PromiseOrValue<string>[],
    paymentDetails: PromiseOrValue<string>[],
    expiryTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOrder(
    dealId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dealerOrders(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string
    ] & {
      id: BigNumber;
      pricePerUnit: BigNumber;
      minLimitAmount: BigNumber;
      maxLimitAmount: BigNumber;
      availableAmount: BigNumber;
      expiryTime: BigNumber;
      status: number;
      dealerAddress: string;
      dealerName: string;
    }
  >;

  dealsCount(overrides?: CallOverrides): Promise<BigNumber>;

  description(overrides?: CallOverrides): Promise<string>;

  increaseDealAmount(
    dealId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketOwner(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  orders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string
    ] & {
      id: BigNumber;
      dealId: BigNumber;
      dealPrice: BigNumber;
      amount: BigNumber;
      startedAt: BigNumber;
      settledAt: BigNumber;
      status: number;
      userAddress: string;
    }
  >;

  ordersCount(overrides?: CallOverrides): Promise<BigNumber>;

  raiseDispute(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  txDoneByUser(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCourt(
    _courtAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDeal(
    dealId: PromiseOrValue<BigNumberish>,
    pricePerUnit: PromiseOrValue<BigNumberish>,
    minLimitAmount: PromiseOrValue<BigNumberish>,
    maxLimitAmount: PromiseOrValue<BigNumberish>,
    paymentMethods: PromiseOrValue<string>[],
    paymentDetails: PromiseOrValue<string>[],
    expiryTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOrder(
    orderId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userOrders(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    acceptOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    courtAddress(overrides?: CallOverrides): Promise<string>;

    createDeal(
      dealerName: PromiseOrValue<string>,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      minLimitAmount: PromiseOrValue<BigNumberish>,
      maxLimitAmount: PromiseOrValue<BigNumberish>,
      availableAmount: PromiseOrValue<BigNumberish>,
      paymentMethods: PromiseOrValue<string>[],
      paymentDetails: PromiseOrValue<string>[],
      expiryTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrder(
      dealId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dealerOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string
      ] & {
        id: BigNumber;
        pricePerUnit: BigNumber;
        minLimitAmount: BigNumber;
        maxLimitAmount: BigNumber;
        availableAmount: BigNumber;
        expiryTime: BigNumber;
        status: number;
        dealerAddress: string;
        dealerName: string;
      }
    >;

    dealsCount(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<string>;

    increaseDealAmount(
      dealId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    marketOwner(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string
      ] & {
        id: BigNumber;
        dealId: BigNumber;
        dealPrice: BigNumber;
        amount: BigNumber;
        startedAt: BigNumber;
        settledAt: BigNumber;
        status: number;
        userAddress: string;
      }
    >;

    ordersCount(overrides?: CallOverrides): Promise<BigNumber>;

    raiseDispute(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    txDoneByUser(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCourt(
      _courtAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDeal(
      dealId: PromiseOrValue<BigNumberish>,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      minLimitAmount: PromiseOrValue<BigNumberish>,
      maxLimitAmount: PromiseOrValue<BigNumberish>,
      paymentMethods: PromiseOrValue<string>[],
      paymentDetails: PromiseOrValue<string>[],
      expiryTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOrder(
      orderId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CourtUpdated(address)"(courtAddress?: null): CourtUpdatedEventFilter;
    CourtUpdated(courtAddress?: null): CourtUpdatedEventFilter;

    "DealAmountIncreased(uint256,uint256)"(
      dealId?: null,
      amount?: null
    ): DealAmountIncreasedEventFilter;
    DealAmountIncreased(
      dealId?: null,
      amount?: null
    ): DealAmountIncreasedEventFilter;

    "DealCreated(string,uint256,uint256,uint256,uint256,string[],string[],uint256)"(
      dealName?: null,
      pricePerUnit?: null,
      minLimitAmount?: null,
      maxLimitAmount?: null,
      availableAmount?: null,
      paymentMethods?: null,
      paymentDetails?: null,
      expiryTime?: null
    ): DealCreatedEventFilter;
    DealCreated(
      dealName?: null,
      pricePerUnit?: null,
      minLimitAmount?: null,
      maxLimitAmount?: null,
      availableAmount?: null,
      paymentMethods?: null,
      paymentDetails?: null,
      expiryTime?: null
    ): DealCreatedEventFilter;

    "DealUpdated(uint256,uint256,uint256,string[],string[],uint256)"(
      pricePerUnit?: null,
      minLimitAmount?: null,
      maxLimitAmount?: null,
      paymentMethods?: null,
      paymentDetails?: null,
      expiryTime?: null
    ): DealUpdatedEventFilter;
    DealUpdated(
      pricePerUnit?: null,
      minLimitAmount?: null,
      maxLimitAmount?: null,
      paymentMethods?: null,
      paymentDetails?: null,
      expiryTime?: null
    ): DealUpdatedEventFilter;

    "DisputeRaised(uint256,address,address,uint256)"(
      dealId?: null,
      raisedBy?: null,
      raisedAgainst?: null,
      amount?: null
    ): DisputeRaisedEventFilter;
    DisputeRaised(
      dealId?: null,
      raisedBy?: null,
      raisedAgainst?: null,
      amount?: null
    ): DisputeRaisedEventFilter;

    "OrderAccepted(uint256)"(orderId?: null): OrderAcceptedEventFilter;
    OrderAccepted(orderId?: null): OrderAcceptedEventFilter;

    "OrderCancelled(uint256)"(orderId?: null): OrderCancelledEventFilter;
    OrderCancelled(orderId?: null): OrderCancelledEventFilter;

    "OrderCreated(uint256,address,address,uint256,uint256)"(
      orderId?: null,
      userAddress?: null,
      dealerAddress?: null,
      dealPrice?: null,
      amount?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      orderId?: null,
      userAddress?: null,
      dealerAddress?: null,
      dealPrice?: null,
      amount?: null
    ): OrderCreatedEventFilter;

    "OrderDoneByUser(uint256)"(orderId?: null): OrderDoneByUserEventFilter;
    OrderDoneByUser(orderId?: null): OrderDoneByUserEventFilter;

    "OrderSettled(uint256)"(orderId?: null): OrderSettledEventFilter;
    OrderSettled(orderId?: null): OrderSettledEventFilter;

    "OrderUpdated(uint256,uint256)"(
      orderId?: null,
      amount?: null
    ): OrderUpdatedEventFilter;
    OrderUpdated(orderId?: null, amount?: null): OrderUpdatedEventFilter;
  };

  estimateGas: {
    acceptOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    courtAddress(overrides?: CallOverrides): Promise<BigNumber>;

    createDeal(
      dealerName: PromiseOrValue<string>,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      minLimitAmount: PromiseOrValue<BigNumberish>,
      maxLimitAmount: PromiseOrValue<BigNumberish>,
      availableAmount: PromiseOrValue<BigNumberish>,
      paymentMethods: PromiseOrValue<string>[],
      paymentDetails: PromiseOrValue<string>[],
      expiryTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOrder(
      dealId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dealerOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dealsCount(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    increaseDealAmount(
      dealId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketOwner(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ordersCount(overrides?: CallOverrides): Promise<BigNumber>;

    raiseDispute(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    txDoneByUser(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCourt(
      _courtAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDeal(
      dealId: PromiseOrValue<BigNumberish>,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      minLimitAmount: PromiseOrValue<BigNumberish>,
      maxLimitAmount: PromiseOrValue<BigNumberish>,
      paymentMethods: PromiseOrValue<string>[],
      paymentDetails: PromiseOrValue<string>[],
      expiryTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOrder(
      orderId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    courtAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createDeal(
      dealerName: PromiseOrValue<string>,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      minLimitAmount: PromiseOrValue<BigNumberish>,
      maxLimitAmount: PromiseOrValue<BigNumberish>,
      availableAmount: PromiseOrValue<BigNumberish>,
      paymentMethods: PromiseOrValue<string>[],
      paymentDetails: PromiseOrValue<string>[],
      expiryTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOrder(
      dealId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dealerOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dealsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseDealAmount(
      dealId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ordersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raiseDispute(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    txDoneByUser(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCourt(
      _courtAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDeal(
      dealId: PromiseOrValue<BigNumberish>,
      pricePerUnit: PromiseOrValue<BigNumberish>,
      minLimitAmount: PromiseOrValue<BigNumberish>,
      maxLimitAmount: PromiseOrValue<BigNumberish>,
      paymentMethods: PromiseOrValue<string>[],
      paymentDetails: PromiseOrValue<string>[],
      expiryTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOrder(
      orderId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
