/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CourtFactoryInterface extends utils.Interface {
  functions: {
    "createCourt(address,address,address[])": FunctionFragment;
    "marketCourts(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createCourt" | "marketCourts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createCourt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketCourts",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createCourt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCourts",
    data: BytesLike
  ): Result;

  events: {
    "CourtCreated(address,address,address,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CourtCreated"): EventFragment;
}

export interface CourtCreatedEventObject {
  courtAddress: string;
  marketAddress: string;
  marketOwner: string;
  juries: string[];
}
export type CourtCreatedEvent = TypedEvent<
  [string, string, string, string[]],
  CourtCreatedEventObject
>;

export type CourtCreatedEventFilter = TypedEventFilter<CourtCreatedEvent>;

export interface CourtFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CourtFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createCourt(
      _marketAddress: PromiseOrValue<string>,
      _marketOwner: PromiseOrValue<string>,
      _juries: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketCourts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  createCourt(
    _marketAddress: PromiseOrValue<string>,
    _marketOwner: PromiseOrValue<string>,
    _juries: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketCourts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    createCourt(
      _marketAddress: PromiseOrValue<string>,
      _marketOwner: PromiseOrValue<string>,
      _juries: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string>;

    marketCourts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "CourtCreated(address,address,address,address[])"(
      courtAddress?: null,
      marketAddress?: null,
      marketOwner?: null,
      juries?: null
    ): CourtCreatedEventFilter;
    CourtCreated(
      courtAddress?: null,
      marketAddress?: null,
      marketOwner?: null,
      juries?: null
    ): CourtCreatedEventFilter;
  };

  estimateGas: {
    createCourt(
      _marketAddress: PromiseOrValue<string>,
      _marketOwner: PromiseOrValue<string>,
      _juries: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketCourts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createCourt(
      _marketAddress: PromiseOrValue<string>,
      _marketOwner: PromiseOrValue<string>,
      _juries: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketCourts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
